// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "NiagaraSystem.h"
#include "GeometryCollection/GeometryCollectionObject.h"
#include "NiagaraDestructionDriverDataAsset.generated.h"

/**
 * 
 */
UCLASS()
class NIAGARADESTRUCTIONDRIVER_API UNiagaraDestructionDriverDataAsset : public UPrimaryDataAsset
{
    GENERATED_BODY()
    
 public:

	UNiagaraDestructionDriverDataAsset();
	
	/**
	 * The original source geometry collection used to generate the niagara driven destructible.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Niagara Destructible")
	TSoftObjectPtr<UGeometryCollection> GeometryCollection;
 
	/**
	 * The static mesh asset generated by the chaos-to-niagara tool.
	 * Each vertex in this static mesh has a custom UV channel value that holds
	 * the bone index that this vertex was bound to in the original chaos geometry collection.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Niagara Destructible")
	TObjectPtr<UStaticMesh> StaticMesh;

	/**
	 * The index of the UV channel where the bone index from the geometry collection is written to.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Niagara Destructible")
	int32 CustomUVChannelIndex = 1;

	/**
	 * The pivot offset of the final merged output mesh of the geometry collection. Used to offset the niagara particle system
	 * so the particle locations and fragments match up.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Niagara Destructible")
	FVector PivotOffset = FVector::ZeroVector;

	/**
	 * The texture generated by the chaos-to-niagara tool whose RGB values
	 * are the XYZ of the initial local positions of each of the bones of the
	 * chaos geometry collection that was processed using the chaos-to-niagara tool
	 */
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Niagara Destructible")
	TObjectPtr<UTexture2D> InitialBoneLocationsTexture;

	/**
	 * The size of the render target texture. Since each pixel holds one "bone" we want this to be sufficiently larged that the
	 * square of this value can hold all of the bones. 
	 */
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Niagara Destructible")
	int32 RenderTargetTextureSize = 16;

	/**
	 * The niagara system used to drive the GPU simulated destructible. The default can be configured in plugin settings.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Niagara Destructible")
	TSoftObjectPtr<UNiagaraSystem> ParticleSystemDriver;
};
